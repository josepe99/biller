generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  lastname      String
  password      String // Hashed password
  role          UserRole  @default(CASHIER)
  loginAttempts Int       @default(0) // Track failed login attempts
  lockedUntil   DateTime? // Account lock expiration
  lastLoginAt   DateTime? // Last successful login
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  sales               Sale[]
  sessions            Session[]
  userRoles           UserRoleAssignment[]
  openedCashRegisters CashRegister[]       @relation("CashRegisterOpenedBy")
  closedCashRegisters CashRegister[]       @relation("CashRegisterClosedBy")
  transactions        Transaction[]        @relation("TransactionUser")
}

// Role model for defining user roles
model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  userRoles       UserRoleAssignment[]
  rolePermissions RolePermission[]
}

// Permission model for defining specific permissions
model Permission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  resource    String // e.g., "products", "sales", "users"
  action      String // e.g., "create", "read", "update", "delete"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  rolePermissions RolePermission[]

  @@unique([resource, action])
}

// Junction table for User-Role many-to-many relationship
model UserRoleAssignment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  roleId     String    @db.ObjectId
  assignedAt DateTime  @default(now())
  assignedBy String?   @db.ObjectId // Who assigned this role
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Junction table for Role-Permission many-to-many relationship
model RolePermission {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String    @db.ObjectId
  permissionId String    @db.ObjectId
  grantedAt    DateTime  @default(now())
  grantedBy    String?   @db.ObjectId // Who granted this permission
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Session model for authentication without JWT
model Session {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  refreshBefore DateTime // Session must be refreshed before this time (will be set to createdAt + 5 days in application code)
  userId        String    @db.ObjectId
  loggedAt      DateTime  @default(now()) // When the user logged in
  expiresAt     DateTime // Session expiration (1 hour from creation)
  userAgent     String? // Browser/device info for security
  ipAddress     String? // IP address for security tracking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([refreshBefore])
}

// Product model for inventory management
model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  cost        Float?
  barcode     String?      @unique
  stock       Int          @default(0)
  categoryId  String?      @db.ObjectId
  discount    Int          @default(0)
  unity       ProductUnity @default(UN) // Unidad de medida: unidad, kg, l, etc.
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  iva         Int

  // Relations
  category  Category?  @relation(fields: [categoryId], references: [id])
  saleItems SaleItem[]
}

// Category model for product organization
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  products Product[]
}

// Sale model for transactions
model Sale {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  saleNumber      String     @unique // Invoice/Sale number in format xxx-xxx-zzzzzzz
  invoicePrefix   String     @default("001") // First 3 digits (xxx)
  invoiceMiddle   String     @default("001") // Middle 3 digits (xxx)
  invoiceSequence Int // Last 7 digits (zzzzzzz) - sequential number
  total           Float
  subtotal        Float
  tax             Float      @default(0)
  discount        Float      @default(0)
  status          SaleStatus @default(COMPLETED)
  userId          String     @db.ObjectId
  customerId      String?    @db.ObjectId
  checkoutId      String     @db.ObjectId // Which checkout/cash register was used
  cashRegisterId  String?    @db.ObjectId // Which cash register session this sale belongs to
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?

  // Relations
  user          User          @relation(fields: [userId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  paymentMethod PaymentMethod
  checkout      Checkout      @relation(fields: [checkoutId], references: [id])
  cashRegister  CashRegister? @relation(fields: [cashRegisterId], references: [id])
  saleItems     SaleItem[]
  salePayments  SalePayment[]
  transactions  Transaction[]
}

// Sale item model for individual items in a sale
model SaleItem {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  unitPrice Float
  total     Float
  productId String    @db.ObjectId
  saleId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  product Product @relation(fields: [productId], references: [id])
  sale    Sale    @relation(fields: [saleId], references: [id])
}

// Sale payment model for tracking multiple payment methods per sale
model SalePayment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  saleId    String    @db.ObjectId
  paidAt    DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sale          Sale          @relation(fields: [saleId], references: [id])
  paymentMethod PaymentMethod
}

// Customer model for customer management (optional)
model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?   @unique
  phone     String?
  address   String?
  ruc       String?   @unique // Tax identification number
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sales Sale[]
}

// Checkout model for managing multiple cash registers/checkouts
model Checkout {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique // e.g., "Caja 1", "Caja Principal", "Caja Express"
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  sales         Sale[]
  cashRegisters CashRegister[]
  transactions  Transaction[]  @relation("TransactionCheckout")
}

// Cash register model for tracking opening/closing sessions and cash summary
model CashRegister {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  checkoutId String             @db.ObjectId
  openedById String             @db.ObjectId // User who opened the register
  closedById String?            @db.ObjectId // User who closed the register
  openedAt   DateTime           @default(now()) // Opening date and time
  closedAt   DateTime? // Closing date and time
  status     CashRegisterStatus @default(OPEN)

  // Opening amounts
  initialCash Float @default(0) // Starting cash amount
  finalCash   Float?            // Cash counted at closing (efectivo final)

  // Discrepancies
  expectedCash   Float? @default(0) // Expected cash (initial + cash sales)
  cashDifference Float? @default(0) // Difference between expected and actual cash

  // Notes and observations
  openingNotes String? // Notes when opening
  closingNotes String? // Notes when closing

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  checkout     Checkout      @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  openedBy     User          @relation("CashRegisterOpenedBy", fields: [openedById], references: [id])
  closedBy     User?         @relation("CashRegisterClosedBy", fields: [closedById], references: [id])
  sales        Sale[]
  transactions Transaction[] @relation("TransactionCashRegister")

  @@index([checkoutId])
  @@index([openedById])
  @@index([closedById])
  @@index([status])
  @@index([openedAt])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum CashRegisterStatus {
  OPEN
  CLOSED
  SUSPENDED // For temporary suspensions
}

// Enum para unidad de producto
enum ProductUnity {
  UN
  KG
  G
  L
  ML
  PACK
  CAJA
  DOC
  PAR
  M
  CM
  MM
  OTRO
}

// Modelo para transacciones de cash, tarjeta, tigo money, etc.
model Transaction {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod  PaymentMethod
  movement       MovementType
  description    String?
  amount         Float         @default(0)
  userId         String?       @db.ObjectId
  checkoutId     String?       @db.ObjectId
  cashRegisterId String?       @db.ObjectId
  saleId         String?       @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  // Relaciones
  user         User?         @relation("TransactionUser", fields: [userId], references: [id])
  checkout     Checkout?     @relation("TransactionCheckout", fields: [checkoutId], references: [id])
  cashRegister CashRegister? @relation("TransactionCashRegister", fields: [cashRegisterId], references: [id])
  sale         Sale?         @relation(fields: [saleId], references: [id])

  @@index([userId])
  @@index([checkoutId])
  @@index([cashRegisterId])
  @@index([saleId])
}

enum PaymentMethod {
  CASH // Efectivo (PYG)
  DEBIT_CARD // Tarjeta de débito (Visa, Mastercard)
  CREDIT_CARD // Tarjeta de crédito (Visa, Mastercard, Amex)
  TIGO_MONEY // Tigo Money (mobile wallet)
  PERSONAL_PAY // Personal Pay (Claro's mobile wallet)
  PAGO_PY_WALLET // Billetera PagoPY (Bancard's wallet)
  BANK_TRANSFER // Transferencia bancaria (TEF, deposito)
  QR_PAYMENT // Pagos con QR (PagoExpress, Billetera PagoPY QR)
  LUKITA // Lukita app payments
  CRYPTO // Criptomonedas (Bitcoin, etc.)
  CHEQUE // Cheque (raro, pero aún usado en algunos casos)
  OTHER // Otros métodos no listados
}

enum MovementType {
  INCOME
  OUTGOING
  TRANSFER
}
